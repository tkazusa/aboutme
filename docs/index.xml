<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Top page on KazLog</title>
    <link>https://tkazusa.github.io/aboutme/</link>
    <description>Recent content in Top page on KazLog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Feb 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://tkazusa.github.io/aboutme/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SSPL をきっかけに最近の OSS 界隈のライセンス問題について</title>
      <link>https://tkazusa.github.io/aboutme/posts/license/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tkazusa.github.io/aboutme/posts/license/</guid>
      <description>Elastic 社の Elasticsearch 及び Kibana のライセンス変更に関連して、AWS が Stepping up for a truly open source Elasticsearchで言及した、&amp;ldquo;What this means for the open source community&amp;rdquo; が気になったので少し調べてみた。
 The term “open source” has had a specific meaning since it was coined in 1998. Elastic’s assertions that the SSPL is “free and open” are misleading and wrong. They’re trying to claim the benefits of open source, while chipping away at the very definition of open source itself.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tkazusa.github.io/aboutme/docs/activities/rust/runtime_and_webserver_crate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tkazusa.github.io/aboutme/docs/activities/rust/runtime_and_webserver_crate/</guid>
      <description>Rust 非同期処理と対応した webserver クレイトまとめ #  Rust 1.39 から導入された Future については、Rustの非同期プログラミングをマスターする が詳しい。
 pub trait Future { type Output; fn poll(self: Pin&amp;lt;&amp;amp;mut Self&amp;gt;, cx: &amp;amp;mut Context) -&amp;gt; Poll&amp;lt;Self::Output&amp;gt;; } pub enum Poll&amp;lt;T&amp;gt; { Ready(T), Pending, } というように、Futue::poll メソッドによって「タスクが完了した」あるいは、「タスクが実行中」という状態を返す。
 async キーワードを書くと、書かれた関数は Future トレイトを impl することになる。
非同期処理には Runtime が必要であり、tokio、async-std、actix-net などがある。
Web フレームワーク #  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://tkazusa.github.io/aboutme/docs/activities/rust/rust_docker_container_for_aws_lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tkazusa.github.io/aboutme/docs/activities/rust/rust_docker_container_for_aws_lambda/</guid>
      <description>[WIP]AWS Lambda でのカスタムコンテナイメージで Rust を動かす #  AWS Lambda の新機能 – コンテナイメージのサポート から、手順を確認。
選択肢は、2つ。
 Amazon Linux ベースのカスタムランタイム用のベースイメージがすでにあって、Lambda ランタイム APIを実装する Alpine や Debian Linux などの独自のベースイメージにした場合には Lamdbaランタイム API を実装する必要がある  関連するツールは下記。
 Runtime interface clients: lambda と関数の間のコミュニケーションを監理する Lambda Runtime Interface Emulator にて、ローカルテストが実施できる  手順は、下記
 AWS Lambda アプリケーションを実装 AWS Lambda のためのコンテナイメージを作成  Dockerfile の作成  Lambda Runtime Interface Client を追加 Lambda Runtime Interface Emulator を追加(オプション) Lambda Runtime Interface Client を起動する entry.sh を作成して、ENTRYPOINT とする     Amazon ECR へプッシュ AWS Lambda 上へデプロイ  Rust Runtime for AWS Lambda とは #   AWS Labs から提供されている Rust のための Runtime 詳しくは Rust Runtime for AWS Lambda Runtime API で実現すること  初期化エラーの通知 Handler の呼び出しとレスポンス or エラーの通知    参考 #   https://github.</description>
    </item>
    
  </channel>
</rss>